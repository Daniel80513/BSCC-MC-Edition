#!/bin/bash
#Add Color for help list
red='\e[0;31m'
green='\e[1;32m'
yellow='\e[1;33m'
source /opt/BSCC/Files/conf.cfg

INTERACTIVE=True
ASK_TO_REBOOT=0
CONFIG=$INSTALL_LOC/Files/conf.cfg
RDIFF=$INSTALL_LOC/rdiff-backup
ARCHIVE=$INSTALL_LOC/archive

#Extra Functions for Cronjobs and Debugs (Down the road)
clear
do_adminpass() {
ADMIN_AREA=$(whiptail --passwordbox "Enter Password:" 8 30 --title "password dialog" 3>&1 1>&2 2>&3)
exitstatus=$?
if [ $ADMIN_PASS == "$ADMIN_AREA"  ]; then
whiptail --ok-button Done --msgbox "Correct password" 10 30
do_admin
else
whiptail --ok-button Done --msgbox "Incorrect password" 10 30
fi
}

do_no_menu_start() {
  if ! screen -list | grep -q "Greeting"; then
     cd $INSTALL_LOC/Files/
     $GREETING
  fi
  if ! screen -list | grep -q "Minecraft"; then
     cd $DIR
     $START
     sed -i 's/check=.*/check=true/g' $CONFIG
  else
     echo "Server was found running... close it before running this"
  fi
}

do_no_menu_stop() {
  if screen -list | grep -q "Minecraft"; then
    screen -ls | grep Greeting | cut -d. -f1 | awk '{print $1}' | xargs kill
    rm $INSTALL_LOC/Files/online.list 2>/dev/null
    sed -i 's/check=.*/check=false/g' $CONFIG
    do_save
    sleep 2
    $CONSOLE1 "stop $CONSOLE2"
  else
     echo "No server was found to be running...did you start on?"
  fi
}

do_save() {
$CONSOLE1 "save-all $CONSOLE2"
}

do_check() {
  if [[ $check = "true" ]]
then
  do_reload
fi
exit 0
}

do_reload() {
if ! screen -list | grep -q "Minecraft"; then
    cd $DIR
    $START
    sed -i 's/check=.*/check=true/g' $CONFIG
fi
exit 0
}

do_restart() {
sed -i 's/check=.*/check=false/g' $CONFIG
do_rdiff
$CONSOLE1 "save-all $CONSOLE2"
$CONSOLE1 "say Restart in 1 Minutes..WHY ARE YOU STILL HERE!!! $CONSOLE2"
sleep 50s
$CONSOLE1 "say 10 seconds..$CONSOLE2"
sleep 10s
$CONSOLE1 "stop $CONSOLE2"
sleep 3
cd $DIR
sleep 10
$START
sed -i 's/check=.*/check=true/g' $CONFIG
exit 0
}

do_restart_now() {
sed -i 's/check=.*/check=false/g' $CONFIG
do_rdiff
$CONSOLE1 "say Server is going down.... Please log NOW! $CONSOLE2"
$CONSOLE1 "save-all $CONSOLE2"
sleep 10
$CONSOLE1 "stop $CONSOLE2"
sleep 10
cd $DIR
$START
sed -i 's/check=.*/check=true/g' $CONFIG
exit 0
}

do_archive() {
  today=$(date '+%Y-%mM-%dD_%HH_%MM_%SS')
if ! screen -list | grep -q "Minecraft"; then
  echo "Backup failed due to no running server found"
  echo "=================================================="
else
  cd $ARCHIVE
  $CONSOLE1 "say Creating Archive of the server, Sorry for any lag. $CONSOLE2"
  do_rdiff
  tar -zcvf "$today".tar.gz -C $RDIFF .
  rm `ls -t | awk 'NR>8'` 2>/dev/null
  $CONSOLE1 "say Archive complete, carry on... :( $CONSOLE2"
fi
}

do_rollback() {
if ! screen -list | grep -q "Minecraft"; then
sed -i 's/check=.*/check=false/g' $CONFIG
rm -rf $DIR/*
rm $INSTALL_LOC/Files/online.list
rsync -r -t $RDIFF/* $DIR
cd $DIR
$START
sed -i 's/check=.*/check=true/g' $CONFIG
else
sed -i 's/check=.*/check=false/g' $CONFIG
$CONSOLE1 "say Going down for rollback! $CONSOLE2"
sleep 10
$CONSOLE1 "stop $CONSOLE2"
sleep 20
do_rollback
fi
}

do_restore() {
if [ "$(ls -A $INSTALL_LOC/archive)" ]; then
  unset restore
  unset selected_restore
  restore=`ls -1t $INSTALL_LOC/archive | awk '{print $1 " |"}'`
  restore=(${restore[@]})
if ! screen -list | grep -q "Minecraft"; then
  sed -i 's/check=.*/check=false/g' $CONFIG
  selected_restore=$(whiptail --menu --fb "Select your restore point" 20 60 10 ${restore[@]} 3>&1 1>&2 2>&3)
  rm -rf $DIR/*
  cp $INSTALL_LOC/archive/$selected_restore $DIR/restore.tar.gz
  cd $DIR
  tar -xvf restore.tar.gz
  rm restore.tar.gz
  $START
  sed -i 's/check=.*/check=true/g' $CONFIG

#Just incase something went really bad...
if [ ! -f $DIR/$SERVERJAR ]; then
    do_fallback
fi
  whiptail --msgbox --fb "Your server should now be restored and loading up.." 20 50 0
else
  sed -i 's/check=.*/check=false/g' $CONFIG
  $CONSOLE1 "say Going down for rollback! $CONSOLE2"
  sleep 5
  whiptail --msgbox --fb "Server was found running.. Hit ok and wait up to 20 seconds to recheck." 20 50 0
  $CONSOLE1 "stop $CONSOLE2"
for ((i=20;i>0;i=i-1)); do
  clear
if screen -list | grep -q "Minecraft"; then
  clear
  echo -n "Time Remaining $i seconds"
  sleep 1
else
  break
fi
done
fi
else
whiptail --msgbox --fb "No Archives found.." 10 60 0
fi
}

do_stats() {
$CONSOLE1 "say "$RAM\B" Ram free out of "$RAM_TOTAL\B" $CONSOLE2"
$CONSOLE1 "say This server is now "$TOTAL\B" in size & $HDDUSED filled. $CONSOLE2"
$CONSOLE1 "say The CPU is currently running at "$CPU\%" $CONSOLE2"
$CONSOLE1 "say Server Uptime & load (1M 5M 15M) $UPTIME $CONSOLE2"
}

do_rdiff() {
if ! screen -list | grep -q "Minecraft"; then
echo "no server running"
else
do_save
sleep 1
rsync -r -t $DIR/* $RDIFF
fi
}

do_inventory() {
clear
#Check that the mods are actually installed...
if [ -f $DIR/mods/OpenB* ]; then
echo "it's there"
else
whiptail --msgbox --fb "You don't have Openblocks and OpenModsLib installed, Please install it to use this feature." 20 60 0
exit 1
fi

#Grab User from player list.
unset playarr
playarr=`cat $PLAYERS | awk '{print $1 " |"}'`
playarr=(${playarr[@]})
unset selected_player
selected_player=$(whiptail --menu "OpenBlocks Inventory Restore Center" 20 60 10  ${playarr[@]} 3>&1 1>&2 2>&3)
RET=$?
if [ $RET -eq 0 ]; then
#Grab all deaths from the users in data folder.
unset new_playarr
new_playarr=`ls -1t $INVENTORY_DIR | grep "inventory-$selected_player" | grep "death" | awk '{print $1 " |"}'`
new_playarr=(${new_playarr[@]})
else
if [ $RET -eq 1 ]; then
echo "leaveing"
do_menu
fi
fi
unset res_playarr
#issue restore from selected file.
res_playarr=$(whiptail --menu "Newest Deaths up top!" 20 60 5 ${new_playarr[@]} 3>&1 1>&2 2>&3)
RET=$?
if [ $RET -eq 0 ]; then
echo $res_playarr
$CONSOLE1 "say Attempting to restore this data! $selected_player $CONSOLE2"
$CONSOLE1 "/ob_inventory restore $selected_player $res_playarr $CONSOLE2"
else
if [ $RET -eq 1 ]; then
do_inventory
echo "it's the end"
fi
fi
}

do_eula() {
#eula.txt Should be there. If not then something went wrong and should say so now.
#source BSCC
if [ ! -f $DIR/eula.txt ]; then
     whiptail --msgbox --fb "Something is wrong here, there is no eula.txt file to be found." 20 60
        exit 0
fi

usereula=`cat $DIR/eula.txt`
#EULA Needs to be accepted by the user
if (whiptail --title "EULA AGREEMENT" --fb --yesno "$usereula" --yes-button true --no-button false 15 60) then
    sed -i 's/eula=.*/eula=true/g' $DIR/eula.txt
else
    sed -i 's/eula=.*/eula=false/g' $DIR/eula.txt
    whiptail --msgbox --fb "Without accepting the eula agreement you won't be able to start this server. Run (BSCC eula) to accept again." 20 60
    exit 0
fi
}

do_console() {
  if ! screen -list | grep -q "Minecraft"; then
        whiptail --msgbox --fb "There is no server running." 20 60 0
        do_admin
  fi
do_command() {
INPUT=$(whiptail --fb --inputbox "Simple chat link to console." 8 78 --title "Chat Log" 3>&1 1>&2 2>&3)
RET=$?
if [ $RET -eq 0 ]; then
screen -S Minecraft -p 0 -X stuff "`printf "$INPUT\r"`";
fi

}

while :
do
   read -t 1 -n 1 key
   if [[ $key = c ]]
then
      do_command
   else
      clear
        if ! screen -list | grep -q "Minecraft"; then
        echo "Server not found...exiting"
        exit 1
else
        echo ${green}"PRESS C TO TYPE IN CONSOLE, OR Q TO EXIT (Might need to hit twice!)"
	tput sgr0
        cat /opt/BSCC/minecraft_server/logs/latest.log | tail -20
        read -t 1 -n 1 key
        if [[ $key = q ]]
then
        do_admin
fi
fi
fi
done
}

do_ram() {
##Setting up Memory alocation to the server
#################################
USERMAX=$(whiptail --inputbox "Please select a MAXMEM Default is 512M" 8 78 $MAXMEM --title "Example Dialog" 3>&1 1>&2 2>&3)
exitstatus=$?
if [ $exitstatus = 0 ]; then
    sed -i 's/MAXMEM=.*/MAXMEM='$USERMAX'/g' $CONFIG
echo "Maxram set to $USERMAX"
else
    sed -i 's/MAXMEM=.*/MAXMEM=512M/g' $CONFIG
echo "Maxram set to 512M"
fi

USERMIN=$(whiptail --inputbox "Please select a MINMEM Default is 128M. (MUST BE LOWER THEN MAXMEM)" 8 78 $MINMEM --title "Setting MINMEM" 3>&1 1>&2 2>&3)
exitstatus=$?
if [ $exitstatus = 0 ]; then
    sed -i 's/MINMEM=.*/MINMEM='$USERMIN'/g' $CONFIG
echo "Minram set to $USERMIN"
else
    sed -i 's/MINMEM=.*/MINMEM=128M/g' $CONFIG
echo "Minram set to 128M"
fi
}

do_first_run() {
(
        sleep 1
        echo XXX
        echo 20
        echo "Inputing user selection"
        echo XXX
        sleep 1
        echo XXX
        echo 40
	      echo "Attemping to start server"
	      touch $INSTALL_LOC/Files/player.list
        echo XXX
        sleep 1
        echo XXX
        echo 60
        echo "Attemping to starting server (Allowing 20 seconds for first load)"
	      source /opt/BSCC/Files/conf.cfg
	      cd $DIR
	      $START
        echo XXX
        #Allow time for the server to load and crash due to eula.
        for ((i=120;i>0;i=i-1)); do
 	        clear
	      if screen -list | grep -q "Minecraft"; then
  	       clear
  	       echo -n "Time Remaining $i seconds"
  	       sleep 1
	      else
  	       break
	      fi
	      done
        #If server doesn't go down, Force it.
        screen -ls | grep Minecraft | cut -d. -f1 | awk '{print $1}' | xargs kill 2>/dev/null
        screen -ls | grep Greeting | cut -d. -f1 | awk '{print $1}' | xargs kill 2>/dev/null
        echo XXX
        echo 80
        echo "Searching for User Agreements"
        echo XXX
        sleep 1
        echo XXX
        echo 100
        echo "Finishing up."
        echo XXX
        sleep 2
) | whiptail --gauge "Gathering info" 8 40 0
#eula.txt Should be there. If not then something went wrong and should say so now.
if [ ! -f $DIR/eula.txt ]; then
     whiptail --msgbox --fb "Something is wrong here, there is no eula.txt file to be found." 20 60
        rm -rf $DIR/*
        screen -ls | grep Minecraft | cut -d. -f1 | awk '{print $1}' | xargs kill
        screen -ls | grep Greeting | cut -d. -f1 | awk '{print $1}' | xargs kill
        sed -i 's/SERVERJAR=.*/SERVERJAR=/g' $CONFIG
        exit 0
fi

#EULA Needs to be accepted by the user
do_eula

#All done here
whiptail --fb --title "YOUR ALL SETUP!!!" --msgbox "Well if your seeing this it means that there is a good chance that your server is all setup and read to go. Give it some time to load and enjoy. Run BSCC for more info" 20 60
exit 0
}

#Fallback incase the Server jar isn't found or is missing after restore..
do_fallback() {
fallback=`ls $DIR | grep ".*.jar" | awk '{print $1 " |"}'`
fallback=(${fallback[@]})
if [ ! -f $DIR/$SERVERJAR ]; then
whiptail --msgbox --fb "Looks like your Server jar is not set. Please try a fallback from the list.." 20 60 0
fallback_attempt=$(whiptail --menu "These are the Jar files we found." 20 60 3 ${fallback[@]} 3>&1 1>&2 2>&3)
sed -i 's/SERVERJAR=.*/SERVERJAR='$fallback_attempt'/g' $CONFIG
fi
}


##Setup Minecraft server
#########################
#Select Version of Minecraft and download.
do_vanilla() {
#Present User with selected Vanilla servers from list.
vanilla_list=`cut -d "=" -f 1 $INSTALL_LOC/Files/vanilla.list | awk '{print $1 " |"}'`
vanilla_list=(${vanilla_list[@]})
vanilla_servers=$(whiptail --menu "Select Your Vanilla server." 20 60 10 ${vanilla_list[@]} 3>&1 1>&2 2>&3)
RET=$?
  if [ $RET -eq 1 ]; then
    exit 1
  elif [ $RET -eq 0 ]; then
dl_link=`cat $INSTALL_LOC/Files/vanilla.list | grep "$vanilla_servers" | awk '{print $2}'`
echo $dl_link
#Check the download and if failed remove the file.
clear
r=`wget -O $DIR/$vanilla_servers.jar $dl_link`
echo $vanilla_servers.jar
if [ $? -ne 0 ]; then
rm $DIR/$vanilla_servers.jar
whiptail --msgbox --clear --fb "Download failed!, check your internet and the link.\
sed -i 's/SERVERJAR=.*/SERVERJAR=/g' $CONFIG
The current link is: $dl_link" 20 60
  else
sed -i 's/MCVERSION=.*/MCVERSION='$vanilla_servers'/g' $CONFIG
sed -i 's/SERVERJAR=.*/SERVERJAR='$vanilla_servers.jar'/g' $CONFIG
do_ram
do_first_run
exit 0
fi
fi
}

do_spigot() {
#Present User with selected Spigot servers from list.
spigot_list=`cut -d "=" -f 1 $INSTALL_LOC/Files/spigot.list | awk '{print $1 " |"}'`
spigot_list=(${spigot_list[@]})
spigot_servers=$(whiptail --menu "Select Your Spigot server." 20 60 10 ${spigot_list[@]} 3>&1 1>&2 2>&3)
RET=$?
  if [ $RET -eq 1 ]; then
    exit 1
  elif [ $RET -eq 0 ]; then
dl_link=`cat $INSTALL_LOC/Files/spigot.list | grep "$spigot_servers" | awk '{print $2}'`

#Check the download and if failed remove the file.
clear
r=`wget -O $DIR/$spigot_servers.jar $dl_link`
if [ $? -ne 0 ]; then
rm $DIR/$spigot_servers.jar
whiptail --msgbox --clear --fb "Download failed!, check your internet and the link.\
The current link is: $dl_link" 20 60
 else
sed -i 's/MCVERSION=.*/MCVERSION='$spigot_servers'/g' $CONFIG
sed -i 's/SERVERJAR=.*/SERVERJAR='$spigot_servers.jar'/g' $CONFIG
do_ram
do_first_run
fi
fi
}

do_bukkit() {
#Present User with selected Bukkit servers from list.
bukkit_list=`cut -d "=" -f 1 $INSTALL_LOC/Files/bukkit.list | awk '{print $1 " |"}'`
bukkit_list=(${bukkit_list[@]})
bukkit_servers=$(whiptail --menu "Select Your Bukkit server." 20 60 10 ${bukkit_list[@]} 3>&1 1>&2 2>&3)
RET=$?
  if [ $RET -eq 1 ]; then
    exit 1
  elif [ $RET -eq 0 ]; then
dl_link=`cat $INSTALL_LOC/Files/bukkit.list | grep "$bukkit_servers" | awk '{print $2}'`

#Check the download and if failed remove the file.
clear
r=`wget -O $DIR/$bukkit_servers.jar $dl_link`
if [ $? -ne 0 ]; then
rm $DIR/$bukkit_servers.jar
whiptail --msgbox --clear --fb "Download failed!, check your internet and the link.\
The current link is: $dl_link" 20 60
  else
sed -i 's/MCVERSION=.*/MCVERSION='$bukkit_servers'/g' $CONFIG
sed -i 's/SERVERJAR=.*/SERVERJAR='$bukkit_servers'/g' $CONFIG
do_ram
do_first_run
fi
fi
}

do_ftb() {
FTB_list=`cut -d "=" -f 1 $INSTALL_LOC/Files/FTB.list | awk '{print $1 " |"}'`
FTB_list=(${FTB_list[@]})
FTB_servers=$(whiptail --menu "Select Your FTB server." 20 60 10 ${FTB_list[@]} 3>&1 1>&2 2>&3)
RET=$?
  if [ $RET -eq 1 ]; then
    exit 1
  elif [ $RET -eq 0 ]; then
dl_link=`cat $INSTALL_LOC/Files/FTB.list | grep "$FTB_servers" | awk '{print $2}'`
fi
#Check the download and if failed remove the file.
clear

r=`wget -O $DIR/$FTB_servers.zip $dl_link`
if [ $? -ne 0 ]; then
rm $DIR/$FTB_servers.zip
whiptail --msgbox --clear --fb "Download failed!, check your internet and the link.\
The current link is: $dl_link" 20 60
 else
sed -i 's/MCVERSION=.*/MCVERSION='$FTB_servers'/g' $CONFIG
fi
do_ram
cd $DIR
unzip $FTB_servers
if [ -f $DIR/FTBInstall.sh ]; then
sh FTBInstall.sh

#Found some FTB that don't have FTBserver.jar in them...
if [ -f $DIR/FTBserver.jar ]; then
  sed -i 's/SERVERJAR=.*/SERVERJAR=FTBserver.jar/g' $CONFIG
else
  do_fallback
fi
else
echo "FTB start script is missing..."
fi
#EULA Needs to be accepted by the user
do_eula
touch $INSTALL_LOC/Files/player.list
whiptail --msgbox --fb "Ok everything should now be ready for you to start. Please use (BSCC menu) also these servers could load slowly...give it some time \n
Also a big THANK YOU to all of the effort from MODS/DEVS involved in the FTB servers and maintenance" 20 60 0
exit 0
}

do_forge() {
if [ ! -d $DIR/world ]; then
  whiptail --msgbox --fb "You are missing the $DIR/world folder... have you ran the server yet?" 20 60 0
clear
echo -e ${red} "Please attempt to start the server at least once."
tput sgr0
exit 1
fi
unset forge_list
forge_list=`cut -d "=" -f 1 $INSTALL_LOC/Files/forge.list | awk '{print $1 " |"}'`
forge_list=(${forge_list[@]})
unset forge_servers
forge_servers=$(whiptail --menu "Your current minecraft is $MCVERSION." 20 60 10 ${forge_list[@]} 3>&1 1>&2 2>&3)
RET=$?
  if [ $RET -eq 1 ]; then
    exit 1
  elif [ $RET -eq 0 ]; then
unset dl_link
dl_link=`cat $INSTALL_LOC/Files/forge.list | grep "$forge_servers" | awk '{print $2}'`

#Make sure that the user is sure..
if (whiptail --title "sellected $forge_servers, your running $MCVERSION" --fb --yesno "You can seriously mess up your server if you mess this up... Are you sure?" 20 70) then
	echo "User choose to test the beta..."
else
	break
fi
r=`wget -O $DIR/forgeinstaller.jar $dl_link`
if [ $? -ne 0 ]; then
rm $DIR/forgeinstaller.jar
whiptail --msgbox --clear --fb "Download failed!, check your internet and the link.\
The current link is: $dl_link" 20 60
else

#Check if the server is currently live
if screen -list | grep -q "Minecraft"; then
$CONSOLE1 "stop $CONSOLE2"
fi

cd $DIR
java -Xmx$MAXMEM -Xms$MINMEM -jar forgeinstaller.jar --installServer > $DIR/forgeinstall.log
rm forgeinstaller.jar
forge=`tail -n 2 $DIR/forgeinstall.log | awk '{print $14}'`
sed -i 's/SERVERJAR=.*/SERVERJAR='$forge'/g' $CONFIG
whiptail --msgbox --fb "Your server was updated and should now start with $forge.\
To install mods you should look here: $DIR/" 20 60 0
rm $DIR/forgeinstall.log
exit 0
fi
fi
}


do_version_option() {
while true; do
VER=$(whiptail --title "Select Minecraft Version" --menu "Please selct what version of Minecraft you wish to run" 15 80 5 \
"1 Vanilla Minecraft" "[Stright from Mojang.(Latest Version)]" \
"2 Spigot" "[Fast lightwaight Bucket style server.(Latest Version)]" \
"3 Bukkit" "[Bukkit also known as Craftbukkit]" \
"4 FTB" "[This will allow you to run a FTB server.]" \
"5 Restore" "[Attempt to restore a server from an archive.]" \
 3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    exit 0
  elif [ $RET -eq 0 ]; then
    case "$VER" in
      1\ *) do_vanilla ;;
      2\ *) do_spigot ;;
      3\ *) do_bukkit ;;
      4\ *) do_ftb ;;
      5\ *) do_restore ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $VER" 20 60 1
  else
    exit 1
  fi
done
}

do_help() {
echo -e "${yellow}This is the list of commands"
echo -e "To use these commands do ./Main command. example ./Main help"
echo -e "${red}start ${green}[This will start your server without loading main menu.]"
echo -e "${red}stop ${green}[Fast and easy way to stop your server.]"
echo -e "${red}save ${green}[This runs minecrafts default save functions.]"
echo -e "${red}restart ${green}[This will prompt the server to restart in 5 minutes...backing up also]"
echo -e "${red}restart_now ${green}[Same as restart but only gives 10 second warning on restart.]"
echo -e "${red}archive ${green}[Does what it says, Unlike save this actually makes a conpressed save of the server.. A true backup.]"
echo -e "${red}rdiff ${green}[Because the server is ran in the RAM you need to pull it from the ram and save to the HDD often, Fastest way to make saves]"
echo -e "${red}stats ${green}[Simple way to display information on the server about ram/cpu/storage/load]"
echo -e "${red}inventory ${green}[Adds the ability to quickly recover lost inventory from a list of the last 5 deaths]"
echo -e "${red}menu ${green}[Main Menu for core server controls.]"
tput sgr0
}


#GUI Menu Starts here!

do_start() {
 if ! screen -list | grep -q "Greeting"; then
    cd $INSTALL_LOC/Files/
    $GREETING
 fi
 if ! screen -list | grep -q "Minecraft"; then
    cd $DIR
    $START
    sed -i 's/check=.*/check=true/g' $CONFIG
    whiptail --fb --msgbox "Your Server is loading up please check the client after a minute or so..." 20 60 1
else
    whiptail --fb --msgbox "Found a server running please stop it first!" 20 60 1
    do_Qstop
fi
}


do_stop() {
  if ! screen -list | grep -q "Minecraft"; then
    whiptail --fb --msgbox "There is no Server running right now, did you start it?" 20 60 1
else
    do_Qstop
fi
}

do_chat() {
INPUT=$(whiptail --fb --inputbox "Simple chat link to console." 8 78 "say " --title "Chat Log" 3>&1 1>&2 2>&3)
RET=$?
if [ $RET -eq 0 ]; then
screen -S Minecraft -p 0 -X stuff "`printf "$INPUT\r"`";
do_chat
fi
}

do_msg() {
INPUT=$(whiptail --fb --inputbox "Simple chat link to console." 8 78 --title "Chat Log" 3>&1 1>&2 2>&3)
RET=$?
if [ $RET -eq 0 ]; then
#Restart checks
if ! screen -list | grep -q "Greeting"; then
    echo "should be starting"
    cd $INSTALL_LOC/Files
    screen -dmS "Greeting" ./Greeting
else
    screen -X -S Greeting quit
    echo "you are leaving"
    echo $INPUT >> $INSTALL_LOC/Files/RandomMSG.txt
    echo "script found running"
    cd $INSTALL_LOC/Files
    screen -dmS "Greeting" ./Greeting
fi
fi
echo "finished"
}

do_prop() {
#Check to make sure the arrey isn't present, Stops duplicates..
if [ ${#PROP[@]} -eq 0 ]; then
    PROP=`cat $SERVER_PROP | grep "=" | awk '{print $1 " |"}'`
    echo "No arrey found, Building"
fi

IFS=$'\r\n' GLOBIGNORE='*' command eval 'PROP=(${PROP[@]})'
SELECTED_PROP=$(whiptail --menu "Select target disk, Or Cancel to Leave" 20 80 10 ${PROP[@]} 3>&1 1>&2 2>&3)
RET=$?
if [ $RET -eq 0 ]; then
#User has selected something.. time to edit
MOD_PROP=`cut -d "=" -f 2 <<< $SELECTED_PROP`
#Take new input
COMPLETE_PROP=$(whiptail --fb --inputbox "" 8 78 "$MOD_PROP" --title "Changing settings for ($SELECTED_PROP) " 3>&1 1>&2 2>&3)
RET=$?
if [ $RET -eq 0 ]; then
REPLACE_PROP=`cut -f1 -d "=" <<< $SELECTED_PROP`
sed -i 's/'$REPLACE_PROP'=.*/'$REPLACE_PROP'='$COMPLETE_PROP'/g' $SERVER_PROP
elif [ $RET -eq 1 ]; then
whiptail --msgbox --fb "Under development" 20 60 1 \
do_admin
  fi
fi
}

do_Qstop() {
 whiptail --fb --yesno "Did you want to stop the server?" 20 60 2 \
    --yes-button Yes --no-button No
  RET=$?
  if [ $RET -eq 0 ]; then
    screen -ls | grep Greeting | cut -d. -f1 | awk '{print $1}' | xargs kill
    rm $INSTALL_LOC/Files/online.list
    sed -i 's/check=.*/check=false/g' $CONFIG
    $CONSOLE1 "stop $CONSOLE2"
    whiptail --fb --msgbox "Stopping Server.." 20 60 1
  fi
}

do_delete() {
if screen -list | grep -q "Minecraft"; then
$CONSOLE1 "stop $CONSOLE2"
sleep 3
fi
if (whiptail --fb --yesno "YOUR ABOUT TO DELETE YOUR MINECRAFT SERVER...IF YOU DO THIS THERE IS NO GOING BACK! \


Think about those poor creepers when you pick your option here." --yes-button DELETE --no-button Leave_Now 20 60 ) then
	(
        sleep 2
        echo XXX
        echo 20
        echo "Searching for poor pigs to kill"
	rm -rf $DIR/*
        rm -rf $INSTALL_LOC/archive/*
        rm -rf $INSTALL_LOC/rdiff-backup*
        rm $INSTALL_LOC/Files/players.list
	touch $INSTALL_LOC/Files/players.list
	sed -i 's/SERVERJAR=.*/SERVERJAR=/g' $CONFIG
        echo XXX
        sleep 2
        echo XXX
        echo 40
        echo "Deleting all mods"
        echo XXX
        sleep 2
        echo XXX
        echo 60
        echo "Smashing houses"
        echo XXX
        sleep 2
        echo XXX
        echo 80
        echo "Hitting Overworld with a comet"
        echo XXX
        sleep 2
        echo XXX
        echo 100
        echo "After the dust settles, you hear a faint creeper hiss..."
        echo XXX
        sleep 2
) | whiptail --gauge "Creapers scatter!" 8 60 0
	whiptail --fb --msgbox "Well we will just ignore that last few seconds and move on to a brighter world..." 20 60
fi

#See if they are looking to start fresh right now.
 whiptail --fb --yesno "Would you like to setup a new server right now?" 20 60 2 \
    --yes-button Yes --no-button No
  RET=$?
  if [ $RET -eq 0 ]; then
    BSCC
    clear
    exit 0
  else
    whiptail --fb --msgbox "Just use (BSCC menu) when your ready to build a new world." 20 60
    exit 0
  fi
}

do_uninstall() {
whiptail --fb --yesno "This is your only chance to say no to this... \n
It will erase your server and everything involved with BSCC. \n
Do you agree?" 20 60 2 \
    --yes-button Yes --no-button No
  RET=$?
  if [ $RET -eq 0 ]; then
    sudo rm -rf $INSTALL_LOC
    sudo rm /usr/bin/BSCC
    whiptail --msgbox --fb "Everything is now removed. I hope you enjoyed using BSCC and please leave a comment as to why your leaving. Thank you." 20 60 0
  else
    echo "no"
    exit 0
  fi
}

do_admin_backupmenu() {
while true; do
  FUN=$(whiptail --fb --title "Backup/Restore" --menu "WARNING!!!"  --cancel-button Exit --ok-button Select 20 80 4 \
    "1 Restore Server" "[Restore the server from a Archive Backup.]" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    exit 1
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      1\ *) do_restore ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
fi
done
}

do_cron() {
unset list
unset commands
varr[0]='check |'
varr[1]='stats |'
varr[2]='archive |'
varr[3]='restart |'
varr[4]='REMOVE |'
varr=(${varr[@]})
crontabs="/var/spool/cron/crontabs"
whiptail --msgbox --fb "The next menu will let you set times for basic functions \n
CHECK=[How often the server should check if the server is up..if down it starts it.] \n
STATS=[Display system stats to the minecraft console to display to users online.] \n
ARCHIVE=[How often a archive should be done.] \n
RESTART=[how often a restart should be done.] \n
REMOVE=[Clear all crontab jobs.]" 20 90 0

list=$(whiptail --menu --fb "testing as usual" 20 60 0 ${varr[@]} 3>&1 1>&2 2>&3)
if [ "$list" = REMOVE ]; then
whiptail --yesno --fb "This will remove all of your Cron Jobs!. Continue?" 20 60 0 \
  --yes-button Yes --no-button No
 RET=$?
   if [ $RET -eq 0 ]; then
    sudo sed -i".bak" '/BSCC*/d' $crontabs/$USER
    whiptail --fb --msgbox "CRON JOBS cleared." 20 60 1
    do_admin_advanced
 else
   if [ $RET -eq 1 ]; then
    do_admin_advanced
  fi
fi
fi
clear
  FUN=$(whiptail --fb --title "CRONTAB" --menu "Select how often you want this to be."  --cancel-button Back --ok-button Select 20 80 5 \
    "1 5" "[Minutes]" \
    "2 10" "[Minutes]" \
    "3 15" "[Minutes]" \
    "4 30" "[Minutes]" \
    "5 1" "[Hour]" \
    "6 2" "[Hours]" \
    "7 6" "[Hours]" \
    "8 12" "[Hours]" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    do_admin_advanced
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      1\ *) sudo sed -i".bak" '/BSCC '${list}'/d' $crontabs/$USER; (crontab -l 2>/dev/null; echo "*/5 * * * * BSCC $list") | crontab - ;;
      2\ *) sudo sed -i".bak" '/BSCC '${list}'/d' $crontabs/$USER; (crontab -l 2>/dev/null; echo "*/10 * * * * BSCC $list") | crontab - ;;
      3\ *) sudo sed -i".bak" '/BSCC '${list}'/d' $crontabs/$USER; (crontab -l 2>/dev/null; echo "*/15 * * * * BSCC $list") | crontab - ;;
      4\ *) sudo sed -i".bak" '/BSCC '${list}'/d' $crontabs/$USER; (crontab -l 2>/dev/null; echo "*/30 * * * * BSCC $list") | crontab - ;;
      5\ *) sudo sed -i".bak" '/BSCC '${list}'/d' $crontabs/$USER; (crontab -l 2>/dev/null; echo "0 */1 * * * BSCC $list") | crontab - ;;
      6\ *) sudo sed -i".bak" '/BSCC '${list}'/d' $crontabs/$USER; (crontab -l 2>/dev/null; echo "0 */2 * * * BSCC $list") | crontab - ;;
      7\ *) sudo sed -i".bak" '/BSCC '${list}'/d' $crontabs/$USER; (crontab -l 2>/dev/null; echo "0 */6 * * * BSCC $list") | crontab - ;;
      8\ *) sudo sed -i".bak" '/BSCC '${list}'/d' $crontabs/$USER; (crontab -l 2>/dev/null; echo "0 */12 * * * BSCC $list") | crontab - ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
fi
}

do_admin_advanced() {
while true; do
  FUN=$(whiptail --fb --title "Admin Advanced menu" --menu "WARNING!!!"  --cancel-button Back --ok-button Select 20 80 4 \
    "1 Crontab" "[Setup jobs for autostart and other things]" \
    "2 Forge Installer" "[Very much in beta]" \
    "3 DELETE SERVER" "[DELETES YOUR SERVER!!]" \
    "4 Uninstall BSCC" "[This will remove BSCC completely]" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    do_admin
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      1\ *) do_cron ;;
      2\ *) do_forge ;;
      3\ *) do_delete ;;
      4\ *) do_uninstall ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
fi
done
}

do_finish() {
  if [ $ASK_TO_REBOOT -eq 1 ]; then
    whiptail --fb --yesno "Would you like to reboot now?" 20 60 2
    if [ $? -eq 0 ]; then # yes
    echo " words lol"
    fi
  fi
  exit 0
}

do_admin() {
while true; do
  FUN=$(whiptail --fb --title "Admin Area" --menu "Server Controls"  --cancel-button Exit --ok-button Select 20 80 5 \
    "1 Console" "[Send/view console.]" \
    "2 Random MSG" "Random Greating/Leaving MSG" \
    "3 Server Properties" "[Modify Server Properties]" \
    "4 Backup/Restore" "[For Restoring the server.]" \
    "5 Advanced menu" "Upgrade & Delete servers" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
     exit 1
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      1\ *) do_console ;;
      2\ *) do_msg ;;
      3\ *) do_prop ;;
      4\ *) do_admin_backupmenu ;;
      5\ *) do_admin_advanced ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
fi
done
}

do_menu() {
while true; do
  FUN=$(whiptail --fb --title "Main Menu" --menu "Server Controls"  --cancel-button Exit --ok-button Select 20 80 7 \
    "1 Admins only" "[Admin controls]" \
    "2 Start" "[Attempts to start the server]" \
    "3 Stop" "[Attempt to stop the server]" \
    "4 Inventory" "[Restore player's inventory]" \
    "5 Chat" "[Send chat directly to the server]" \
    "6 Info" "[Fast info about your device/server]" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    do_finish
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      1\ *) do_adminpass ;;
      2\ *) do_start ;;
      3\ *) do_stop ;;
      4\ *) do_inventory ;;
      5\ *) do_chat ;;
      6\ *) do_info ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  else
    exit 1
  fi
done
}

do_info(){
on_list=`cat $INSTALL_LOC/Files/online.list`
on_list=(${on_list[@]})
on_now=`cat /opt/BSCC/minecraft_server/server.properties | grep "max-players" | cut -d "=" -f 2`
CPU=`top -bn 1 | awk 'NR>7{s+=$9} END {print s/4}'`
RAM=`free -mh | grep Mem | cut -c 37-40`
HDD_TOTAL=`df -kh . | grep / | awk '{print $4}'`
JAVA_VERSION=`java -version 2>&1 |awk 'NR==1{ gsub(/"/,""); print $3 }'`
whiptail --fb --title "Current server stats" --yesno --yes-button REFRESH --no-button Back \
"Server Version: $MCVERSION \n
Current Players Online: ${#on_list[@]}/$on_now \n
CPU Usage is: $CPU% \n
Server Uptime: $UPTIME \n
Ram Available: "$RAM\B"/"$RAM_TOTAL\B" \n
Total Storage used/left: $TOTAL/$HDD_TOTAL \n
Your Java Version is: $JAVA_VERSION" 25 50 10
CHOICES=$?
unset on_list
unset CPU
unset RAM
  if [ $CHOICES -eq 0 ]; then
   	do_info
fi
clear
}

#####################################################################
#Actually the beginning of this huge mess..also a catch for problems..
######################################################################
 if [ ! -f $DIR/$SERVERJAR ]; then
    do_version_option
fi

#Extra Functions for cronjobs and debug (Down the road)
#Selection for Functions.

case "$1" in
  (menu)
    do_menu
    exit 0
    ;;
  (start)
    do_no_menu_start
    exit 0
    ;;
  (stop)
    do_no_menu_stop
    exit 0
    ;;
  (save)
    do_save
    exit 0
    ;;
  (check)
    do_check
    exit 0
    ;;
  (restart)
    do_restart
    exit 0
    ;;
  (restart_now)
    do_restart_now
    exit 0
    ;;
  (archive)
    do_archive
    exit 0
    ;;
  (rdiff)
   do_rdiff
   exit 0
    ;;
  (rollback)
    do_rollback
    exit 0
    ;;
  (stats)
    do_stats
    exit 0
    ;;
  (inventory)
   do_inventory
    exit 0
    ;;
  (info)
   do_info
    exit 0
    ;;
  (eula)
   do_eula
   do_menu
   exit 0
    ;;
  (help)
    do_help
    exit 0
    ;;
  (*)
  echo -e "${yellow}Usage:${green} $0 ${red}{command}"
  echo -e "${yellow}For a list of commands use ${red}./Main help"
  tput sgr0
    exit 2
    ;;
esac
