#!/bin/bash
#Add Color for help list
red='\e[0;31m'
green='\e[1;32m'
yellow='\e[1;33m'
source /opt/BSCC/Files/conf.cfg

INTERACTIVE=True
ASK_TO_REBOOT=0
CONFIG=$INSTALL_LOC/Files/conf.cfg
LOG=$HOME/logs/uptime
RDIFF=$HOME/rdiff-backup
BACKUP=$HOME/backup

#Extra Functions for Cronjobs and Debugs (Down the road)

do_adminpass() {
ADMIN_AREA=$(whiptail --passwordbox "Enter Password:" 8 78 --title "password dialog" 3>&1 1>&2 2>&3)
exitstatus=$?
if [ $ADMIN_PASS == "$ADMIN_AREA"  ]; then 
whiptail --ok-button Done --msgbox "Correct password" 10 30
do_admin
else
whiptail --ok-button Done --msgbox "Incorrect password" 10 30
fi
}

do_save() {
$CONSOLE1 "save-all $CONSOLE2"
exit 0
}

do_check() {
  if [[ $check = "true" ]] 
then
  do_reload
fi
exit 0
}

do_reload() {
if ! screen -list | grep -q "Minecraft"; then
    echo "Minecraft server was down, attempting to restart now!!!" >> $LOG
    date >> $LOG
    cd $DIR
    $START
    echo "================================================" >> $LOG
fi
exit 0
}

do_restart() {
sed -i 's/check=.*/check=false/g' $CONFIG
echo " This is on restart but catching the backup log" >> $LOG
do_backup
echo " This was done by the command do_restart" >> $LOG
date >> $LOG
echo " ======================================" >> $LOG
    echo "Server is restarting now." >> $LOG
    date >> $LOG
    echo "================================================" >> $LOG
$CONSOLE1 "say Restart in 5 Minutes..$CONSOLE2"
$CONSOLE1 "save-all $CONSOLE2"
sleep 1m
$CONSOLE1 "say Restart in 4 Minutes..$CONSOLE2"
sleep 1m
$CONSOLE1 "say Restart in 3 Minutes..$CONSOLE2"
sleep 1m
$CONSOLE1 "say Restart in 2 Minutes..$CONSOLE2"
sleep 1m
$CONSOLE1 "say Restart in 1 Minutes..WHY ARE YOU STILL HERE!!! $CONSOLE2"
sleep 30s
$CONSOLE1 "say 30 seconds..$CONSOLE2"
sleep 10s
$CONSOLE1 "say 20 seconds..$CONSOLE2"
sleep 10s
$CONSOLE1 "say 10 seconds..$CONSOLE2"
sleep 1s
$CONSOLE1 "say 9 seconds..$CONSOLE2"
sleep 1s
$CONSOLE1 "say 8 seconds..$CONSOLE2"
sleep 1s
$CONSOLE1 "say 7 seconds..$CONSOLE2"
sleep 1s
$CONSOLE1 "say 6 seconds..$CONSOLE2"
sleep 1s
$CONSOLE1 "say 5 seconds..$CONSOLE2"
sleep 1s
$CONSOLE1 "say 4 seconds..$CONSOLE2"
sleep 1s
$CONSOLE1 "say 3 seconds..$CONSOLE2"
sleep 1s
$CONSOLE1 "say 2 seconds..$CONSOLE2"
sleep 1s
$CONSOLE1 "say 1 seconds..$CONSOLE2"
sleep 1s
$CONSOLE1 "stop $CONSOLE2"
sleep 3
cd $DIR
sleep 10
$START
sed -i 's/check=.*/check=true/g' $CONFIG
exit 0
}

do_restart_now() {
sed -i 's/check=.*/check=false/g' $CONFIG
echo " This was done by the command restart_now" >> $LOG
date >> $LOG
echo " ======================================" >> $LOG
do_backup

$CONSOLE1 "say Server is going down.... Please log NOW! $CONSOLE2"
$CONSOLE1 "save-all $CONSOLE2"
sleep 10
$CONSOLE1 "stop $CONSOLE2"
sleep 10
cd $DIR
$START
sed -i 's/check=.*/check=true/g' $CONFIG
exit 0
}

do_backup() {
today=$(date '+%Y-%mM-%dD_%HH_%MM_%SS')
if ! screen -list | grep -q "Minecraft"; then
echo "Backup failed due to no running server found" >> $LOG
    echo "==================================================" >> $LOG
else
cd $BACKUP
echo " This was done by the command do_backup" >> $LOG
date >> $LOG
echo " ======================================" >> $LOG
$CONSOLE1 "say Backing up server, Sorry for any lag. $CONSOLE2"
do_rdiff
tar -zcvf "$today".tar.gz -C $RDIFF .
rm `ls -t | awk 'NR>3'`
$CONSOLE1 "say Backup complete, carry on knowing you're trusting my scripts... :( $CONSOLE2"
fi
}

do_restore() {
if ! screen -list | grep -q "Minecraft"; then
sed -i 's/check=.*/check=false/g' $CONFIG
echo "Server is down, Continuing." >> $LOG
date >> $LOG
rm -rf $DIR/*
cp -p "`ls -dtr1 $BACKUP/2016* | tail -1`" $DIR/restore.tar.gz
cd $DIR
tar -xvf restore.tar.gz
rm restore.tar.gz
echo "Server has been restored!" >> $LOG
$START
sed -i 's/check=.*/check=true/g' $CONFIG
else
echo "Server was found running, Stopping now." >> $LOG
sed -i 's/check=.*/check=false/g' $CONFIG
$CONSOLE1 "say Going down for rollback! $CONSOLE2"
sleep 10
$CONSOLE1 "stop $CONSOLE2"
sleep 20
do_restore
fi
}

do_stats() {
$CONSOLE1 "say "$RAM\B" Ram free out of 7949MB $CONSOLE2"
$CONSOLE1 "say This server is now "$TOTAL\B" in size & $HDDUSED filled. $CONSOLE2"
$CONSOLE1 "say The CPU is currently running at "$CPU\%" $CONSOLE2"
$CONSOLE1 "say Server Uptime & load (1M 5M 15M) $UPTIME $CONSOLE2"
}

do_rdiff() {
if ! screen -list | grep -q "Minecraft"; then
echo "no server running"
else
rsync -r -t $DIR/* $RDIFF
fi
}

do_inventory() {
clear

#Grab User from player list.
unset playarr
playarr=`cat $PLAYERS | awk '{print $1 " |"}'`
playarr=(${playarr[@]})
unset selected_player
selected_player=$(whiptail --menu "Things go here" 20 60 10  ${playarr[@]} 3>&1 1>&2 2>&3)
RET=$?
if [ $RET -eq 0 ]; then
#Grab all deaths from the users in data folder.
unset new_playarr
new_playarr=`ls -1t $INVENTORY_DIR | grep "inventory-$selected_player" | grep "death" | awk '{print $1 " |"}'`
new_playarr=(${new_playarr[@]})
else
if [ $RET -eq 1 ]; then
echo "leaveing"
do_menu
fi
fi
unset res_playarr
#issue restore from selected file.
res_playarr=$(whiptail --menu "things go here" 20 60 5 ${new_playarr[@]} 3>&1 1>&2 2>&3)
RET=$?
if [ $RET -eq 0 ]; then
echo $res_playarr
$CONSOLE1 "say Attempting to restore this data! $selected_player $CONSOLE2"
$CONSOLE1 "/ob_inventory restore $selected_player $res_playarr $CONSOLE2"
else
if [ $RET -eq 1 ]; then
do_inventory
echo "it's the end"
fi
fi
}

do_eula() {
#eula.txt Should be there. If not then something went wrong and should say so now.
#source BSCC
if [ ! -f $DIR/eula.txt ]; then
     whiptail --msgbox --fb "Something is wrong here, there is no eula.txt file to be found." 20 60
        exit 0
fi

##start server and wait for EULA##
usereula=`cat $DIR/eula.txt`
#whiptail --msgbox --title "Eula Agreement Info" "$usereula$  On the next tab you will select agree or cancel" 20 60 1

#EULA Needs to be accepted by the user
if (whiptail --title "EULA AGREEMENT" --fb --yesno "$usereula" --yes-button true --no-button false 15 60) then
    sed -i 's/eula=.*/eula=true/g' $DIR/eula.txt
else
    sed -i 's/eula=.*/eula=false/g' $DIR/eula.txt
    whiptail --msgbox --fb "Without accepting the eula agreement you won't be able to start this server. Run (BSCC eula) to accept again." 20 60
    exit 0
fi
}

do_first_run() {
##Setting up Memory alocation to the server
#################################
USERMAX=$(whiptail --inputbox "Please select a MAXMEM Default is 512M" 8 78 $MAXMEM --title "Example Dialog" 3>&1 1>&2 2>&3)
exitstatus=$?
if [ $exitstatus = 0 ]; then
    sed -i 's/MAXMEM=.*/MAXMEM='$USERMAX'/g' $CONFIG
fi
USERMIN=$(whiptail --inputbox "Please select a MINMEM Default is 128M. (MUST BE LOWER THEN MAXMEM)" 8 78 $MINMEM --title "Setting MINMEM" 3>&1 1>&2 2>&3)
exitstatus=$?
if [ $exitstatus = 0 ]; then
    sed -i 's/MINMEM=.*/MINMEM='$USERMIN'/g' $CONFIG
fi

(
        sleep 1
        echo XXX
        echo 20
        echo "Inputing user selection"
        echo XXX
        sleep 1
        echo XXX
        echo 40
	echo "Attemping to starting server"
        echo XXX
        sleep 1
        echo XXX
        echo 60
        echo "Attemping to starting server"
	cd $DIR
	$START
        echo XXX
        sleep 20
        echo XXX
        echo 80
        echo "Searching for User Agreements"
        echo XXX
        sleep 1
        echo XXX
        echo 100
        echo "Finishing up."
        echo XXX
        sleep 2
) | whiptail --gauge "Gathering info" 8 40 0

#eula.txt Should be there. If not then something went wrong and should say so now.
if [ ! -f $DIR/eula.txt ]; then
     whiptail --msgbox --fb "Something is wrong here, there is no eula.txt file to be found." 20 60
        exit 0
fi

##start server and wait for EULA##
usereula=`cat $DIR/eula.txt`
#whiptail --msgbox --title "Eula Agreement Info" "$usereula$  On the next tab you will select agree or cancel" 20 60 1

#EULA Needs to be accepted by the user
if (whiptail --title "EULA AGREEMENT" --fb --yesno "$usereula" --yes-button true --no-button false 15 60) then
    sed -i 's/eula=.*/eula=true/g' $DIR/eula.txt
else
    sed -i 's/eula=.*/eula=false/g' $DIR/eula.txt
    whiptail --msgbox --fb "Without accepting the eula agreement you won't be able to start this server. Run (BSCC eula) to accept again." 20 60
    exit 0
fi

#All done here
whiptail --fb --title "YOUR ALL SETUP!!!" --msgbox "Well if your seeing this it means that there is a good chance that your server is all setup and read to go. Give it some time to load and enjoy. Run BSCC for more info" 20 60
exit 0
}

##Setup Minecraft server 
#########################
#Select Version of Minecraft and download.
do_vanilla_latest() {
downloadurl="https://minecraft.net/download"
serverurl=""
loc=$([[ -n $1 ]] && printf $1 || printf "$DIR/minecraft_server.jar")

if [[ -a $loc ]]; then
        printf "$loc exists -- moving to ${loc}.old\n"
        mv $loc ${loc}.old
fi

printf "Getting download URL for minecraft server...\n"

serverurl=`curl -s $downloadurl | egrep -io 'https.*versions\/(.*)\/minecraft_server.\1.jar'`

printf "URL = "$serverurl"\n"

printf "Downloading server jar...\n"

wget -q -O $loc $serverurl
do_first_run
}


do_vanilla() {
#Simple check to see if a server already exists
while true; do
FUN=$(whiptail --title "Vanilla Minecraft" --menu "Please pick a Vanilla Edition you would like." 15 60 3 \
"1 Latest" "" \
"2 Version 1.9" "" \
"3 Version 1.8" "" \
"4 Version 1.7.10" "" \
 3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    exit 0
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      1\ *) do_vanilla_latest ;;
      2\ *) wget https://launcher.mojang.com/mc/game/1.9/server/b4d449cf2918e0f3bd8aa18954b916a4d1880f0d/server.jar -O $DIR/minecraft_server.jar ; do_first_run ;;
      3\ *) wget https://launcher.mojang.com/mc/game/1.8/server/a028f00e678ee5c6aef0e29656dca091b5df11c7/server.jar -O $DIR/minecraft_server.jar ; do_first_run ;;
      4\ *) wget https://launcher.mojang.com/mc/game/1.7.10/server/952438ac4e01b4d115c5fc38f891710c4941df29/server.jar -O $DIR/minecraft_server.jar ; do_first_run ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  else
    exit 1
  fi
done
}

do_spigot() {
echo "Grabbing the latest successful build of Spigot"
wget http://getspigot.org/jenkins/job/Spigot/lastSuccessfulBuild/artifact/spigot-1.9.jar -O $DIR/minecraft_server.jar
do_first_run
}

do_version_option() {
while true; do
VER=$(whiptail --title "Select Minecraft Version" --menu "Please selct what version of Minecraft you wish to run" 10 80 2 \
"1 Vanilla Minecraft" "[Stright from Mojang.(Latest Version)]" \
"2 Spigot" "[Fast lightwaight Bucket style server.(Latest Version)]" \
 3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    exit 0
  elif [ $RET -eq 0 ]; then
    case "$VER" in
      1\ *) do_vanilla ;;
      2\ *) do_spigot ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $VER" 20 60 1
  else
    exit 1
  fi
done
}

#Simple check to see if a server already exists
if [ ! -f "$DIR/$SERVERJAR" ]; then
        do_version_option
fi


do_help() {
echo -e "${yellow}This is the list of commands"
echo "To use these commands do ./Main command. example ./Main help"
echo -e "${red}save ${green}[This runs minecrafts default save functions.]"
echo -e "${red}restart ${green}[This will prompt the server to restart in 5 minutes...backing up also]"
echo -e "${red}restart_now ${green}[Same as restart but only gives 10 second warning on restart.]"
echo -e "${red}backup ${green}[Does what it says, Unlike save this actually makes a conpressed save of the server.. A true backup.]"
echo -e "${red}rdiff ${green}[Because the server is ran in the RAM you need to pull it from the ram and save to the HDD often, This will do that. NOT A BACKUP!]"
echo -e "${red}restore ${green}[Something broke bad and you need to roll back!, This will pull the last full backup and restore to that point.]"
echo -e "${red}stats ${green}[Simple way to display information on the server about ram/cpu/storage/load]"
echo -e "${red}inventory ${green}[Adds the ability to quickly recover lost inventory from a list of the last 5 deaths]"
echo -e "${red}menu ${green}[Main Menu for the GUI fans...aka noobies.]"
tput sgr0
}


#GUI Menu Starts here!

do_start() {
 if ! screen -list | grep -q "Minecraft"; then
    echo "Screen not found!"
    cd $DIR
    $START
    whiptail --fb --msgbox "Your Server is loading up please check the client after a minute or so..." 20 60 1
else
    whiptail --fb --msgbox "Found a server running please stop it first!" 20 60 1
    echo "Screen found!"
    do_question
fi
}


do_stop() {
  if ! screen -list | grep -q "Minecraft"; then
    whiptail --fb --msgbox "There is no Server running right now, did you start it?" 20 60 1
else
    do_Qstop
fi
}

do_chat() {
INPUT=$(whiptail --fb --inputbox "Simple chat link to console." 8 78 "say " --title "Chat Log" 3>&1 1>&2 2>&3)
RET=$?
if [ $RET -eq 0 ]; then
screen -S Minecraft -p 0 -X stuff "`printf "$INPUT\r"`";
do_chat
fi
}

do_msg() {
INPUT=$(whiptail --fb --inputbox "Simple chat link to console." 8 78 --title "Chat Log" 3>&1 1>&2 2>&3)
RET=$?
if [ $RET -eq 0 ]; then
#Restart checks
if ! screen -list | grep -q "Players"; then
    echo "should be starting"
    cd $INSTALL_LOC/Files
    screen -dmS "Players" ./Players
else
    screen -X -S Players quit
    echo "you are leaving"
    echo $INPUT >> $INSTALL_LOC/Files/RandomMSG.txt
    echo "script found running"
    cd $INSTALL_LOC/Files
    screen -dmS "Players" ./Players
fi
fi
echo "finished"
}

do_prop() {

#Check to make sure the arrey isn't present, Stops duplicates..
if [ ${#PROP[@]} -eq 0 ]; then
    PROP=`cat $SERVER_PROP | grep "=" | awk '{print $1 " |"}'`
    echo "No arrey found, Building"
fi

IFS=$'\r\n' GLOBIGNORE='*' command eval 'PROP=(${PROP[@]})'
SELECTED_PROP=$(whiptail --menu "Select target disk, Or Cancel to Leave" 20 80 10 ${PROP[@]} 3>&1 1>&2 2>&3)
RET=$?
if [ $RET -eq 0 ]; then
#User has selected something.. time to edit
MOD_PROP=`cut -d "=" -f 2 <<< $SELECTED_PROP`
#Take new input
COMPLETE_PROP=$(whiptail --fb --inputbox "" 8 78 "$MOD_PROP" --title "Changing settings for ($SELECTED_PROP) " 3>&1 1>&2 2>&3)
RET=$?
if [ $RET -eq 0 ]; then
REPLACE_PROP=`cut -f1 -d "=" <<< $SELECTED_PROP`
sed -i 's/'$REPLACE_PROP'=.*/'$REPLACE_PROP'='$COMPLETE_PROP'/g' $SERVER_PROP
elif [ $RET -eq 1 ]; then
whiptail --msgbox --fb "Under development" 20 60 1 \
do_admin
  fi
fi
}

do_Qstop() {
 whiptail --fb --yesno "Did you want to stop the server?" 20 60 2 \
    --yes-button Yes --no-button No
  RET=$?
  if [ $RET -eq 0 ]; then
    sed -i 's/check=.*/check=false/g' $CONFIG
    $CONSOLE1 "stop $CONSOLE2"
    echo "Someone stopped this server!" >> $LOG
    whiptail --fb --msgbox "Stopping Server.." 20 60 1
  fi
}

do_finish() {
  if [ $ASK_TO_REBOOT -eq 1 ]; then
    whiptail --fb --yesno "Would you like to reboot now?" 20 60 2
    if [ $? -eq 0 ]; then # yes
    echo " words lol"
    fi
  fi
  exit 0
}

do_admin() {
while true; do
  FUN=$(whiptail --fb --title "Admin Area" --menu "Server Controls"  --cancel-button Exit --ok-button Select 20 80 3 \
    "1 Chat" "[Direct message to console]" \
    "2 Server Properties" "[Modify Server Properties]" \
    "3 Advanced menu" "Upgrade & Delete servers" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    exit 1
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      1\ *) do_chat ;;
      2\ *) do_prop ;;
      3\ *) do_admin_advanced ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
fi
done
}

do_menu() {
while true; do
  FUN=$(whiptail --fb --title "You can pry it works, that's what I do" --menu "Server Controls"  --cancel-button Exit --ok-button Select 20 80 7 \
    "1 Admins only" "[Admin controls]" \
    "2 Start" "[Attempts to start the server]" \
    "3 Stop" "[Attempt to stop the server]" \
    "4 Inventory" "[Restore player's inventory (up to 5 deaths back.)]" \
    "5 Random MSG" "[clearly fun stuff]" \
    3>&1 1>&2 2>&3)
  RET=$?
  if [ $RET -eq 1 ]; then
    do_finish
  elif [ $RET -eq 0 ]; then
    case "$FUN" in
      1\ *) do_adminpass ;;
      2\ *) do_start ;;
      3\ *) do_stop ;;
      4\ *) do_inventory ;;
      5\ *) do_msg ;;
      *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
    esac || whiptail --msgbox "There was an error running option $FUN" 20 60 1
  else
    exit 1
  fi
done
}
#Extra Functions for cronjobs and debug (Down the road)
#Selection for Functions.

case "$1" in
  (menu)
    do_menu
    exit 0
    ;;
  (save) 
    do_save
    exit 0
    ;;
  (check)
    do_check
    exit 0
    ;;
  (restart)
    do_restart
    exit 0
    ;;
  (restart_now)
    do_restart_now
    exit 0
    ;;
  (backup)
    do_backup
    exit 0
    ;;
  (rdiff)
   do_rdiff
   exit 0
    ;;
  (restore)
    do_restore
    exit 0
    ;;
  (stats)
    do_stats
    exit 0
    ;;
 (inventory)
   do_inventory
    exit 0
    ;;
  (eula)
   do_eula
   do_menu
   exit 0
    ;;
  (help)
    do_help
    exit 0
    ;;
  (*)
  echo -e "${yellow}Usage:${green} $0 ${red}{command}"
  echo -e "${yellow}For a list of commands use ${red}./Main help"
  tput sgr0
    exit 2
    ;;
esac
